### Implement Min Heap using an Array

#include <iostream>
#include <vector>
using namespace std;

class MinHeap {
private:
    vector<int> heap;

    void heapifyUp(int index) {
        if (index == 0) return; 
        int parent = (index - 1) / 2;
        if (heap[parent] > heap[index]) {
            swap(heap[parent], heap[index]);
            heapifyUp(parent);
        }
    }
    void heapifyDown(int index) {
        int left = 2 * index + 1;
        int right = 2 * index + 2;
        int smallest = index;

        if (left < heap.size() && heap[left] < heap[smallest])
            smallest = left;
        if (right < heap.size() && heap[right] < heap[smallest])
            smallest = right;

        if (smallest != index) {
            swap(heap[index], heap[smallest]);
            heapifyDown(smallest);
        }
    }

public:
    void insert(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
        cout << value << " inserted into Min Heap.\n";
    }

    void deleteMin() {
        if (heap.empty()) {
            cout << "Heap is empty.\n";
            return;
        }
        cout << "Removed min: " << heap[0] << endl;
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown(0);
    }

    int getMin() {
        if (heap.empty()) {
            cout << "Heap is empty.\n";
            return -1;
        }
        return heap[0];
    }

    void display() {
        cout << "Min Heap: ";
        for (int val : heap)
            cout << val << " ";
        cout << endl;
    }
};

int main() {
    MinHeap h;
    h.insert(20);
    h.insert(15);
    h.insert(30);
    h.insert(5);
    h.insert(10);

    h.display();
    cout << "Current Min: " << h.getMin() << endl;

    h.deleteMin();
    h.display();
    cout << "Current Min: " << h.getMin() << endl;

    return 0;
}
